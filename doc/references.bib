@techreport{10.5555/889486,
  author = {Clinger, William D},
  title = {Foundations of Actor Semantics},
  year = {1981},
  publisher = {Massachusetts Institute of Technology},
  address = {USA},
  abstract = {The actor message-passing model of concurrent computation has inspired new ideas in the areas of knowledge-based systems, programming languages and their semantics, and computer systems architecture. This thesis extends and unifies the work of Carl Hewitt, Irene Greif, Henry Baker, and Giuseppe Attardi, who developed the mathematical content of the model. The ordering laws postulated by Hewitt and Baker can be proved using a notion of global time. The most general ordering laws are equivalent to an axiom of realizability in global time. Since nondeterministic concurrency is more fundamental than deterministic sequential computation, there may be no need to take fixed points in the underlying domain of a power domain. Power domains built from incomplete domains can solve the problem of providing a fixed point semantics for a class of nondeterministic programming languages in which a fair merge can be written. The locality laws postulated by Hewitt and Baker may be proved for the semantics of an actor-based language. Altering the semantics slightly can falsify the locality laws. The locality laws thus constrain what counts as an actor semantics.}
}

@book{newton1959correspondence,
  title={The Correspondence of Isaac Newton: 1661-1675},
  author={Newton, I. and Turnbull, H.W.},
  isbn={9780521087223},
  lccn={59065134},
  series={Correspondence},
  url={https://books.google.dk/books?id=xPsoAQAAMAAJ},
  year={1959},
  publisher={Published for the Royal Society at the University Press}
}

@book{jain1991art,
  title={The Art of Computer Systems Performance Analysis: Techniques for Experimental Design, Measurement, Simulation, and Modeling},
  author={Jain, R.},
  isbn={9780471503361},
  lccn={lc90045479},
  series={Wiley professional computing},
  url={https://www.wiley.com/en-us/The+Art+of+Computer+Systems+Performance+Analysis%3A+Techniques+for+Experimental+Design%2C+Measurement%2C+Simulation%2C+and+Modeling-p-9780471503361},
  year={1991},
  publisher={Wiley}
}

% https://www.bibme.org/bibliographies/44f3f040-c9f4-4176-9606-ec3d47d905c4
@misc{buffy_s7e4,
  title={Buffy the Vampire Slayer -- season 7, episode 4: "Help"},
  volume={7},
  number={4},
  journal={Buffy the Vampire Slayer},
  publisher={UPN},
  author={Whedon, Joss and Kirshner, Rebecca and Greenberg, Drew Z},
  year={2002},
  month={Oct}
}

@article{knuth1977notes,
  title={Notes on the van Emde Boas construction of priority deques: An instructive use of recursion},
  author={Knuth, Donald E},
  journal={Letter to Peter van Emde Boas},
  pages={256},
  year={1977}
}

@article{knuth74ComputerProgrammingasanArt,
  author = {Knuth, Donald E.},
  title = {Computer Programming as an Art},
  year = {1974},
  issue_date = {Dec 1974},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  volume = {17},
  number = {12},
  issn = {0001-0782},
  url = {https://doi.org/10.1145/361604.361612},
  doi = {10.1145/361604.361612},
  abstract = {When Communications of the ACM began publication in 1959, the members of ACM's Editorial Board made the following remark as they described the purposes of ACM's periodicals [2]: “If computer programming is to become an important part of computer research and development, a transition of programming from an art to a disciplined science must be effected.” Such a goal has been a continually recurring theme during the ensuing years; for example, we read in 1970 of the “first steps toward transforming the art of programming into a science” [26]. Meanwhile we have actually succeeded in making our discipline a science, and in a remarkably simple way: merely by deciding to call it “computer science.”},
  journal = {Commun. ACM},
  month = {dec},
  pages = {667–673},
  numpages = {7}
}

